Method: setConfig
VULNERABLE VERSION:

    public void setConfig(IGerritHudsonTriggerConfig config) {
        this.config = config;
    }
FIXED VERSION:

    public void setConfig(IGerritHudsonTriggerConfig config) {
        checkPermission();
        this.config = config;
    }
================================================================================
Method: start
VULNERABLE VERSION:

    public void start() {
        logger.info("Starting GerritServer: " + name);

        //do not try to connect to gerrit unless there is a URL or a hostname in the text fields
        List<VerdictCategory> categories = config.getCategories();
        if (categories == null) {
            categories = new LinkedList<VerdictCategory>();
        }
        if (categories.isEmpty()) {
            categories.add(new VerdictCategory("Code-Review", "Code Review"));
            categories.add(new VerdictCategory("Verified", "Verified"));
        }
        config.setCategories(categories);
        gerritEventManager = PluginImpl.getHandler_();

        if (missedEventsPlaybackManager == null) {
            missedEventsPlaybackManager = new GerritMissedEventsPlaybackManager(name);
        }

        initializeConnectionListener();

        projectListUpdater =
                new GerritProjectListUpdater(name);
        projectListUpdater.start();

        missedEventsPlaybackManager.checkIfEventsLogPluginSupported();
        addListener((GerritEventListener)missedEventsPlaybackManager);

        logger.info(name + " started");
        started = true;
    }
FIXED VERSION:

    public void start() {
        checkPermission();
        logger.info("Starting GerritServer: " + name);

        //do not try to connect to gerrit unless there is a URL or a hostname in the text fields
        List<VerdictCategory> categories = config.getCategories();
        if (categories == null) {
            categories = new LinkedList<VerdictCategory>();
        }
        if (categories.isEmpty()) {
            categories.add(new VerdictCategory("Code-Review", "Code Review"));
            categories.add(new VerdictCategory("Verified", "Verified"));
        }
        config.setCategories(categories);
        gerritEventManager = PluginImpl.getHandler_();

        if (missedEventsPlaybackManager == null) {
            missedEventsPlaybackManager = new GerritMissedEventsPlaybackManager(name);
        }

        initializeConnectionListener();

        projectListUpdater =
                new GerritProjectListUpdater(name);
        projectListUpdater.start();

        missedEventsPlaybackManager.checkIfEventsLogPluginSupported();
        addListener((GerritEventListener)missedEventsPlaybackManager);

        logger.info(name + " started");
        started = true;
    }
================================================================================
Method: stop
VULNERABLE VERSION:

    public void stop() {
        logger.info("Stopping GerritServer " + name);

        if (projectListUpdater != null) {
            projectListUpdater.shutdown();
            try {
                projectListUpdater.join();
            } catch (InterruptedException ie) {
                logger.error("project list updater of " + name + "interrupted", ie);
            }
            projectListUpdater = null;
        }

        if (missedEventsPlaybackManager != null) {
            missedEventsPlaybackManager.shutdown();
            missedEventsPlaybackManager = null;
        }

        if (gerritConnection != null) {
            gerritConnection.shutdown(false);
            gerritConnection = null;
        }

        logger.info(name + " stopped");
        started = false;
    }
FIXED VERSION:

    public void stop() {
        checkPermission();
        logger.info("Stopping GerritServer " + name);

        if (projectListUpdater != null) {
            projectListUpdater.shutdown();
            try {
                projectListUpdater.join();
            } catch (InterruptedException ie) {
                logger.error("project list updater of " + name + "interrupted", ie);
            }
            projectListUpdater = null;
        }

        if (missedEventsPlaybackManager != null) {
            missedEventsPlaybackManager.shutdown();
            missedEventsPlaybackManager = null;
        }

        if (gerritConnection != null) {
            gerritConnection.shutdown(false);
            gerritConnection = null;
        }

        logger.info(name + " stopped");
        started = false;
    }
================================================================================
Method: startConnection
VULNERABLE VERSION:
 void startConnection() {
        if (!config.hasDefaultValues()) {
            if (gerritConnection == null) {
                logger.debug("Starting Gerrit connection...");
                gerritConnection = new GerritConnection(name, config);
                gerritEventManager.setIgnoreEMail(name, config.getGerritEMail());
                gerritConnection.setHandler(gerritEventManager);
                gerritConnection.addListener(gerritConnectionListener);
                gerritConnection.addListener(projectListUpdater);

                missedEventsPlaybackManager.checkIfEventsLogPluginSupported();
                gerritConnection.addListener(missedEventsPlaybackManager);

                gerritConnection.start();
            } else {
                logger.warn("Already started!");
            }
        }
    }
FIXED VERSION:
 void startConnection() {
        checkPermission();
        if (!config.hasDefaultValues()) {
            if (gerritConnection == null) {
                logger.debug("Starting Gerrit connection...");
                gerritConnection = new GerritConnection(name, config);
                gerritEventManager.setIgnoreEMail(name, config.getGerritEMail());
                gerritConnection.setHandler(gerritEventManager);
                gerritConnection.addListener(gerritConnectionListener);
                gerritConnection.addListener(projectListUpdater);

                missedEventsPlaybackManager.checkIfEventsLogPluginSupported();
                gerritConnection.addListener(missedEventsPlaybackManager);

                gerritConnection.start();
            } else {
                logger.warn("Already started!");
            }
        }
    }
================================================================================
Method: stopConnection
VULNERABLE VERSION:
 void stopConnection() {
        if (gerritConnection != null) {
            gerritConnection.shutdown(true);
            gerritConnection.removeListener(gerritConnectionListener);
            gerritConnection.removeListener(missedEventsPlaybackManager);
            gerritConnection = null;
            gerritEventManager.setIgnoreEMail(name, null);
        } else {
            logger.warn("Was told to shutdown again?");
        }
    }
FIXED VERSION:
 void stopConnection() {
        checkPermission();
        if (gerritConnection != null) {
            gerritConnection.shutdown(true);
            gerritConnection.removeListener(gerritConnectionListener);
            gerritConnection.removeListener(missedEventsPlaybackManager);
            gerritConnection = null;
            gerritEventManager.setIgnoreEMail(name, null);
        } else {
            logger.warn("Was told to shutdown again?");
        }
    }
================================================================================
Method: rename
VULNERABLE VERSION:

    private void rename(String newName) {
        if (isConnected()) {
            stopConnection();
            stop();
            String oldName = name;
            name = newName;
            start();
            startConnection();
            changeSelectedServerInJobs(oldName);
        } else {
            stop();
            String oldName = name;
            name = newName;
            start();
            changeSelectedServerInJobs(oldName);
        }
    }
FIXED VERSION:

    private void rename(String newName) {
        checkPermission();
        if (isConnected()) {
            stopConnection();
            stop();
            String oldName = name;
            name = newName;
            start();
            startConnection();
            changeSelectedServerInJobs(oldName);
        } else {
            stop();
            String oldName = name;
            name = newName;
            start();
            changeSelectedServerInJobs(oldName);
        }
    }
================================================================================
Method: doWakeup
VULNERABLE VERSION:

    public JSONObject doWakeup() {
        Timer timer = new Timer();
        try {
            startConnection();

            final CountDownLatch responseLatch = new CountDownLatch(RESPONSE_COUNT);
            timer.schedule(new TimerTask() {
                @Override
                public void run() {
                    if (gerritConnectionListener != null && gerritConnectionListener.isConnected()) {
                        responseLatch.countDown();
                    }
                }
            }, RESPONSE_INTERVAL_MS, RESPONSE_INTERVAL_MS);

            if (responseLatch.await(RESPONSE_TIMEOUT_S, TimeUnit.SECONDS)) {
                timeoutWakeup = false;
                setConnectionResponse(START_SUCCESS);
            } else {
                timeoutWakeup = true;
                throw new InterruptedException("time out.");
            }
        } catch (Exception ex) {
            setConnectionResponse(START_FAILURE);
            logger.error("Could not start connection. ", ex);
        }
        timer.cancel();

        JSONObject obj = new JSONObject();
        String status = "down";
        if (gerritConnectionListener != null) {
            if (gerritConnectionListener.isConnected()) {
                status = "up";
            }
        }
        obj.put("status", status);
        return obj;
    }
FIXED VERSION:

    public JSONObject doWakeup() {
        checkPermission();
        Timer timer = new Timer();
        try {
            startConnection();

            final CountDownLatch responseLatch = new CountDownLatch(RESPONSE_COUNT);
            timer.schedule(new TimerTask() {
                @Override
                public void run() {
                    if (gerritConnectionListener != null && gerritConnectionListener.isConnected()) {
                        responseLatch.countDown();
                    }
                }
            }, RESPONSE_INTERVAL_MS, RESPONSE_INTERVAL_MS);

            if (responseLatch.await(RESPONSE_TIMEOUT_S, TimeUnit.SECONDS)) {
                timeoutWakeup = false;
                setConnectionResponse(START_SUCCESS);
            } else {
                timeoutWakeup = true;
                throw new InterruptedException("time out.");
            }
        } catch (Exception ex) {
            setConnectionResponse(START_FAILURE);
            logger.error("Could not start connection. ", ex);
        }
        timer.cancel();

        JSONObject obj = new JSONObject();
        String status = "down";
        if (gerritConnectionListener != null) {
            if (gerritConnectionListener.isConnected()) {
                status = "up";
            }
        }
        obj.put("status", status);
        return obj;
    }
================================================================================
Method: doSleep
VULNERABLE VERSION:

    public JSONObject doSleep() {
        Timer timer = new Timer();
        try {
            stopConnection();

            final CountDownLatch responseLatch = new CountDownLatch(RESPONSE_COUNT);
            timer.schedule(new TimerTask() {
                @Override
                public void run() {
                    if (gerritConnectionListener == null || !gerritConnectionListener.isConnected()) {
                        responseLatch.countDown();
                    }
                }
            }, RESPONSE_INTERVAL_MS, RESPONSE_INTERVAL_MS);

            if (responseLatch.await(RESPONSE_TIMEOUT_S, TimeUnit.SECONDS)) {
                setConnectionResponse(STOP_SUCCESS);
            } else {
                throw new InterruptedException("time out.");
            }
        } catch (Exception ex) {
            setConnectionResponse(STOP_FAILURE);
            logger.error("Could not stop connection. ", ex);
        }
        timer.cancel();

        JSONObject obj = new JSONObject();
        String status = "down";
        if (gerritConnectionListener != null) {
            if (gerritConnectionListener.isConnected()) {
                status = "up";
            }
        }
        obj.put("status", status);
        return obj;
    }
FIXED VERSION:

    public JSONObject doSleep() {
        checkPermission();
        Timer timer = new Timer();
        try {
            stopConnection();

            final CountDownLatch responseLatch = new CountDownLatch(RESPONSE_COUNT);
            timer.schedule(new TimerTask() {
                @Override
                public void run() {
                    if (gerritConnectionListener == null || !gerritConnectionListener.isConnected()) {
                        responseLatch.countDown();
                    }
                }
            }, RESPONSE_INTERVAL_MS, RESPONSE_INTERVAL_MS);

            if (responseLatch.await(RESPONSE_TIMEOUT_S, TimeUnit.SECONDS)) {
                setConnectionResponse(STOP_SUCCESS);
            } else {
                throw new InterruptedException("time out.");
            }
        } catch (Exception ex) {
            setConnectionResponse(STOP_FAILURE);
            logger.error("Could not stop connection. ", ex);
        }
        timer.cancel();

        JSONObject obj = new JSONObject();
        String status = "down";
        if (gerritConnectionListener != null) {
            if (gerritConnectionListener.isConnected()) {
                status = "up";
            }
        }
        obj.put("status", status);
        return obj;
    }
================================================================================
