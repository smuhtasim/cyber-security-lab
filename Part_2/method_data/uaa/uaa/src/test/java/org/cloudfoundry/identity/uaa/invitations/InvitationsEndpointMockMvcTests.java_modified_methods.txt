Method: assertResponseAndCodeCorrect
VULNERABLE VERSION:


    private void assertResponseAndCodeCorrect(String[] emails, String redirectUrl, String subdomain, InvitationsResponse response, ClientDetails clientDetails) {
        for (int i = 0; i < emails.length; i++) {
            assertThat(response.getNewInvites().size(), is(emails.length));
            assertThat(response.getNewInvites().get(i).getEmail(), is(emails[i]));
            assertThat(response.getNewInvites().get(i).getOrigin(), is(OriginKeys.UAA));
            assertThat(response.getNewInvites().get(i).getUserId(), is(notNullValue()));
            assertThat(response.getNewInvites().get(i).getErrorCode(), is(nullValue()));
            assertThat(response.getNewInvites().get(i).getErrorMessage(), is(nullValue()));
            String link = response.getNewInvites().get(i).getInviteLink().toString();
            assertFalse(contains(link, "@"));
            assertFalse(contains(link, "%40"));
            if (StringUtils.hasText(subdomain)) {
                assertThat(link, startsWith("http://" + subdomain + ".localhost/invitations/accept"));
            } else {
                assertThat(link, startsWith("http://localhost/invitations/accept"));
            }

            String query = response.getNewInvites().get(i).getInviteLink().getQuery();
            assertThat(query, startsWith("code="));
            String code = query.split("=")[1];
            ExpiringCode expiringCode = codeStore.retrieveCode(code);
            assertThat(expiringCode.getExpiresAt().getTime(), is(greaterThan(System.currentTimeMillis())));
            assertThat(expiringCode.getIntent(), is(ExpiringCodeType.INVITATION.name()));
            Map<String, String> data = readValue(expiringCode.getData(), new TypeReference<Map<String, String>>() {});
            assertThat(data.get(InvitationConstants.USER_ID), is(notNullValue()));
            assertThat(data.get(InvitationConstants.EMAIL), is(emails[i]));
            assertThat(data.get(ORIGIN), is(OriginKeys.UAA));
            assertThat(data.get(CLIENT_ID), is(clientDetails.getClientId()));
            assertThat(data.get(REDIRECT_URI), is(redirectUrl));
        }
    }
FIXED VERSION:


    private void assertResponseAndCodeCorrect(String[] emails, String redirectUrl, IdentityZone zone, InvitationsResponse response, ClientDetails clientDetails) {
        for (int i = 0; i < emails.length; i++) {
            assertThat(response.getNewInvites().size(), is(emails.length));
            assertThat(response.getNewInvites().get(i).getEmail(), is(emails[i]));
            assertThat(response.getNewInvites().get(i).getOrigin(), is(OriginKeys.UAA));
            assertThat(response.getNewInvites().get(i).getUserId(), is(notNullValue()));
            assertThat(response.getNewInvites().get(i).getErrorCode(), is(nullValue()));
            assertThat(response.getNewInvites().get(i).getErrorMessage(), is(nullValue()));
            String link = response.getNewInvites().get(i).getInviteLink().toString();
            assertFalse(contains(link, "@"));
            assertFalse(contains(link, "%40"));
            if (zone != null && StringUtils.hasText(zone.getSubdomain())) {
                assertThat(link, startsWith("http://" + zone.getSubdomain() + ".localhost/invitations/accept"));
                IdentityZoneHolder.set(zone);
            } else {
                assertThat(link, startsWith("http://localhost/invitations/accept"));
            }

            String query = response.getNewInvites().get(i).getInviteLink().getQuery();
            assertThat(query, startsWith("code="));
            String code = query.split("=")[1];
            ExpiringCode expiringCode = codeStore.retrieveCode(code);
            IdentityZoneHolder.clear();
            assertThat(expiringCode.getExpiresAt().getTime(), is(greaterThan(System.currentTimeMillis())));
            assertThat(expiringCode.getIntent(), is(ExpiringCodeType.INVITATION.name()));
            Map<String, String> data = readValue(expiringCode.getData(), new TypeReference<Map<String, String>>() {});
            assertThat(data.get(InvitationConstants.USER_ID), is(notNullValue()));
            assertThat(data.get(InvitationConstants.EMAIL), is(emails[i]));
            assertThat(data.get(ORIGIN), is(OriginKeys.UAA));
            assertThat(data.get(CLIENT_ID), is(clientDetails.getClientId()));
            assertThat(data.get(REDIRECT_URI), is(redirectUrl));
        }
    }
================================================================================
