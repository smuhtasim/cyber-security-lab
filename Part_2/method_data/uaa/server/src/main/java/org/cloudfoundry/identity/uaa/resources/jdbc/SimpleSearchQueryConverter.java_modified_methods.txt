Method: comparisonClause
VULNERABLE VERSION:


    protected String comparisonClause(SCIMFilter filter, String comparator, Map<String, Object> values, String valuePrefix, String valueSuffix, String paramPrefix) {
        String pName = getParamName(values, paramPrefix);
        String paramName = ":"+pName;
        if (filter.getFilterValue() == null) {
            return getAttributeName(filter, mapper) + " IS NULL";
        } else if (filter.isQuoteFilterValue()) {
            Object value = getStringOrDate(filter.getFilterValue());
            if (value instanceof String) {
                //lower is used to satisfy the requirement that all quoted values are compared case insensitive
                switch (filter.getFilterAttribute().getAttributeName().toLowerCase()) {
                    case "client_secret" :
                    case "password" :
                    case "salt" :
                        value = "";
                    default:
                        break;
                }
                values.put(pName, valuePrefix+value+valueSuffix);
                if (isDbCaseInsensitive()) {
                    return "" + getAttributeName(filter, mapper) + " "+comparator+" " + paramName+"";
                } else {
                    return "LOWER(" + getAttributeName(filter, mapper) + ") " + comparator + " LOWER(" + paramName + ")";
                }
            } else {
                values.put(pName, value);
                return getAttributeName(filter, mapper) + " "+comparator+" " + paramName;
            }
        } else {
            try {
                values.put(pName, Double.parseDouble(filter.getFilterValue()));
            } catch (NumberFormatException x) {
                if ("true".equalsIgnoreCase(filter.getFilterValue())) {
                    values.put(pName, Boolean.TRUE);
                } else if ("false".equalsIgnoreCase(filter.getFilterValue())) {
                    values.put(pName, Boolean.FALSE);
                } else {
                    throw new IllegalArgumentException("Invalid non quoted value ["+filter.getFilterAttribute()+
                        " : "+filter.getFilterValue()+"]");
                }
            }
            return getAttributeName(filter, mapper) + " "+comparator+" " + paramName;
        }
    }
FIXED VERSION:


    protected String comparisonClause(SCIMFilter filter,
                                      String comparator,
                                      Map<String, Object> values,
                                      String valuePrefix,
                                      String valueSuffix,
                                      String paramPrefix) {
        String pName = getParamName(values, paramPrefix);
        String paramName = ":"+pName;
        if (filter.getFilterValue() == null) {
            return getAttributeName(filter, mapper) + " IS NULL";
        } else if (filter.isQuoteFilterValue()) {
            Object value = getStringOrDate(filter.getFilterValue());
            if (value instanceof String) {
                //lower is used to satisfy the requirement that all quoted values are compared case insensitive
                switch (filter.getFilterAttribute().getAttributeName().toLowerCase()) {
                    case "client_secret" :
                    case "password" :
                    case "salt" :
                        value = "";
                    default:
                        break;
                }
                values.put(pName, valuePrefix+value+valueSuffix);
                if (isDbCaseInsensitive()) {
                    return "" + getAttributeName(filter, mapper) + " "+comparator+" " + paramName+"";
                } else {
                    return "LOWER(" + getAttributeName(filter, mapper) + ") " + comparator + " LOWER(" + paramName + ")";
                }
            } else {
                values.put(pName, value);
                return getAttributeName(filter, mapper) + " "+comparator+" " + paramName;
            }
        } else {
            try {
                values.put(pName, Double.parseDouble(filter.getFilterValue()));
            } catch (NumberFormatException x) {
                if ("true".equalsIgnoreCase(filter.getFilterValue())) {
                    values.put(pName, Boolean.TRUE);
                } else if ("false".equalsIgnoreCase(filter.getFilterValue())) {
                    values.put(pName, Boolean.FALSE);
                } else {
                    throw new IllegalArgumentException("Invalid non quoted value ["+filter.getFilterAttribute()+
                        " : "+filter.getFilterValue()+"]");
                }
            }
            return getAttributeName(filter, mapper) + " "+comparator+" " + paramName;
        }
    }
================================================================================
