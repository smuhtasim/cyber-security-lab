Method: FileResource
VULNERABLE VERSION:

    public FileResource(File file)
    {
        assertValidPath(file.toString());
        _file=file;
        _uri=normalizeURI(_file,_file.toURI());
        _alias=checkFileAlias(_file);
    }
FIXED VERSION:

    public FileResource(File base, String childPath)
    {
        String encoded = URIUtil.encodePath(childPath);

        _file = new File(base, childPath);

        // The encoded path should be a suffix of the resource (give or take a directory / )
        URI uri;
        try
        {
            if (base.isDirectory())
            {
                // treat all paths being added as relative
                uri=new URI(URIUtil.addPaths(base.toURI().toASCIIString(),encoded));
            }
            else
            {
                uri=new URI(base.toURI().toASCIIString()+encoded);
            }
        }
        catch (final URISyntaxException e)
        {
            throw new InvalidPathException(base.toString() + childPath, e.getMessage())
            {
                {
                    initCause(e);
                }
            };
        }

        _uri=uri;
        _alias=checkFileAlias(_uri,_file);
    }
================================================================================
Method: checkFileAlias
VULNERABLE VERSION:

    private static URI checkFileAlias(File file)
    {
        try
        {
            String abs=file.getAbsolutePath();
            String can=file.getCanonicalPath();

            if (!abs.equals(can))
            {
                if (LOG.isDebugEnabled())
                    LOG.debug("ALIAS abs={} can={}",abs,can);

                URI alias=new File(can).toURI();
                // Have to encode the path as File.toURI does not!
                String uri="file://"+URIUtil.encodePath(alias.getPath());
                return new URI(uri);
            }
        }
        catch(Exception e)
        {
            LOG.warn("bad alias for {}: {}",file,e.toString());
            LOG.debug(e);
            try
            {
                return new URI("http://eclipse.org/bad/canonical/alias");
            }
            catch(Exception e2)
            {
                LOG.ignore(e2);
                throw new RuntimeException(e);
            }
        }

        return null;
    }
FIXED VERSION:

    private static URI checkFileAlias(final URI uri, final File file)
    {
        try
        {
            if (!URIUtil.equalsIgnoreEncodings(uri,file.toURI()))
            {
                // Return alias pointing to Java File normalized URI
                return new File(uri).getAbsoluteFile().toURI();
            }

            String abs=file.getAbsolutePath();
            String can=file.getCanonicalPath();

            if (!abs.equals(can))
            {
                if (LOG.isDebugEnabled())
                    LOG.debug("ALIAS abs={} can={}",abs,can);

                URI alias=new File(can).toURI();
                // Have to encode the path as File.toURI does not!
                return new URI("file://"+URIUtil.encodePath(alias.getPath()));
            }
        }
        catch(Exception e)
        {
            LOG.warn("bad alias for {}: {}",file,e.toString());
            LOG.debug(e);
            try
            {
                return new URI("http://eclipse.org/bad/canonical/alias");
            }
            catch(Exception e2)
            {
                LOG.ignore(e2);
                throw new RuntimeException(e);
            }
        }

        return null;
    }
================================================================================
Method: isDirectory
VULNERABLE VERSION:

    public boolean isDirectory()
    {
        return _file.exists() && _file.isDirectory() || _uri.endsWith("/");
    }
FIXED VERSION:

    public boolean isDirectory()
    {
        return _file.exists() && _file.isDirectory() || _uri.toASCIIString().endsWith("/");
    }
================================================================================
Method: list
VULNERABLE VERSION:

    public String[] list()
    {
        String[] list =_file.list();
        if (list==null)
            return null;
        for (int i=list.length;i-->0;)
        {
            if (new File(_file,list[i]).isDirectory() &&
                !list[i].endsWith("/"))
                list[i]+="/";
        }
        return list;
    }
FIXED VERSION:

    public String[] list()
    {
        String[] list =_file.list();
        if (list==null)
            return null;
        for (int i=list.length;i-->0;)
        {
            if (new File(_file,list[i]).isDirectory() &&
                    !list[i].endsWith("/"))
                list[i]+="/";
        }
        return list;
    }
================================================================================
Method: hashCode
VULNERABLE VERSION:

    public int hashCode()
    {
       return null == _file ? super.hashCode() : _file.hashCode();
    }
FIXED VERSION:

    public int hashCode()
    {
        return null == _file ? super.hashCode() : _file.hashCode();
    }
================================================================================
Method: getURL
VULNERABLE VERSION:

    public URL getURL()
    {
        try
        {
            return new URL(_uri);
        }
        catch (MalformedURLException e)
        {
            throw new IllegalStateException(e);
        }
    }
FIXED VERSION:

    public URL getURL()
    {
        try
        {
            return _uri.toURL();
        }
        catch (MalformedURLException e)
        {
            throw new IllegalStateException(e);
        }
    }
================================================================================
Method: getURI
VULNERABLE VERSION:

    public URI getURI()
    {
        return _file.toURI();
    }
FIXED VERSION:

    public URI getURI()
    {
        return _uri;
    }
================================================================================
Method: toString
VULNERABLE VERSION:

    public String toString()
    {
        return _uri;
    }
FIXED VERSION:

    public String toString()
    {
        return _uri.toString();
    }
================================================================================
