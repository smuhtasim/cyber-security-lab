Method: parse
VULNERABLE VERSION:


	public BeanDefinition parse(Element elt, ParserContext pc) {
		MatcherType matcherType = MatcherType.fromElement(elt);
		String path = elt.getAttribute(HttpSecurityBeanDefinitionParser.ATT_PATH_PATTERN);
		String requestMatcher = elt.getAttribute(ATT_REQUEST_MATCHER_REF);
		String filters = elt.getAttribute(HttpSecurityBeanDefinitionParser.ATT_FILTERS);

		BeanDefinitionBuilder builder = BeanDefinitionBuilder
				.rootBeanDefinition(DefaultSecurityFilterChain.class);

		if (StringUtils.hasText(path)) {
			Assert.isTrue(!StringUtils.hasText(requestMatcher), "");
			builder.addConstructorArgValue(matcherType.createMatcher(path, null));
		}
		else {
			Assert.isTrue(StringUtils.hasText(requestMatcher), "");
			builder.addConstructorArgReference(requestMatcher);
		}

		if (filters.equals(HttpSecurityBeanDefinitionParser.OPT_FILTERS_NONE)) {
			builder.addConstructorArgValue(Collections.EMPTY_LIST);
		}
		else {
			String[] filterBeanNames = StringUtils.tokenizeToStringArray(filters, ",");
			ManagedList<RuntimeBeanReference> filterChain = new ManagedList<RuntimeBeanReference>(
					filterBeanNames.length);

			for (String name : filterBeanNames) {
				filterChain.add(new RuntimeBeanReference(name));
			}

			builder.addConstructorArgValue(filterChain);
		}

		return builder.getBeanDefinition();
	}
FIXED VERSION:


	public BeanDefinition parse(Element elt, ParserContext pc) {
		MatcherType matcherType = MatcherType.fromElement(elt);
		String path = elt.getAttribute(HttpSecurityBeanDefinitionParser.ATT_PATH_PATTERN);
		String requestMatcher = elt.getAttribute(ATT_REQUEST_MATCHER_REF);
		String filters = elt.getAttribute(HttpSecurityBeanDefinitionParser.ATT_FILTERS);

		BeanDefinitionBuilder builder = BeanDefinitionBuilder
				.rootBeanDefinition(DefaultSecurityFilterChain.class);

		if (StringUtils.hasText(path)) {
			Assert.isTrue(!StringUtils.hasText(requestMatcher), "");
			builder.addConstructorArgValue(matcherType.createMatcher(pc, path, null));
		}
		else {
			Assert.isTrue(StringUtils.hasText(requestMatcher), "");
			builder.addConstructorArgReference(requestMatcher);
		}

		if (filters.equals(HttpSecurityBeanDefinitionParser.OPT_FILTERS_NONE)) {
			builder.addConstructorArgValue(Collections.EMPTY_LIST);
		}
		else {
			String[] filterBeanNames = StringUtils.tokenizeToStringArray(filters, ",");
			ManagedList<RuntimeBeanReference> filterChain = new ManagedList<RuntimeBeanReference>(
					filterBeanNames.length);

			for (String name : filterBeanNames) {
				filterChain.add(new RuntimeBeanReference(name));
			}

			builder.addConstructorArgValue(filterChain);
		}

		return builder.getBeanDefinition();
	}
================================================================================
