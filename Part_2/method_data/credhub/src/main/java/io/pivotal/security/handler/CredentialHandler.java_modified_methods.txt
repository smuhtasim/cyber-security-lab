Method: deleteCredential
VULNERABLE VERSION:


  public void deleteCredential(UserContext userContext, String credentialName) {
    if (!permissionService.hasPermission(userContext.getAclUser(), credentialName, DELETE)) {
      throw new EntryNotFoundException("error.acl.lacks_credential_write");
    }

    boolean deleteSucceeded = credentialDataService.delete(credentialName);

    if (!deleteSucceeded) {
      throw new EntryNotFoundException("error.acl.lacks_credential_write");
    }
  }
FIXED VERSION:


  public void deleteCredential(UserContext userContext, String credentialName) {
    if (!permissionService.hasPermission(userContext.getAclUser(), credentialName, DELETE)) {
      throw new EntryNotFoundException("error.credential.invalid_access");
    }

    boolean deleteSucceeded = credentialDataService.delete(credentialName);

    if (!deleteSucceeded) {
      throw new EntryNotFoundException("error.credential.invalid_access");
    }
  }
================================================================================
Method: getAllCredentialVersions
VULNERABLE VERSION:


  public DataResponse getAllCredentialVersions(
      UserContext userContext,
      List<EventAuditRecordParameters> auditRecordParametersList,
      String credentialName
  ) {
    EventAuditRecordParameters auditRecordParameters = new EventAuditRecordParameters(AuditingOperationCode.CREDENTIAL_ACCESS, credentialName);
    auditRecordParametersList.add(auditRecordParameters);

    List<Credential> credentials = credentialDataService.findAllByName(credentialName);

    // We need this extra check in case permissions aren't being enforced.
    if (credentials.isEmpty() || !permissionService.hasPermission(userContext.getAclUser(), credentialName, READ)) {
      throw new EntryNotFoundException("error.credential_not_found");
    }

    return DataResponse.fromEntity(credentials);
  }
FIXED VERSION:


  public DataResponse getAllCredentialVersions(
      UserContext userContext,
      List<EventAuditRecordParameters> auditRecordParametersList,
      String credentialName
  ) {
    EventAuditRecordParameters auditRecordParameters = new EventAuditRecordParameters(AuditingOperationCode.CREDENTIAL_ACCESS, credentialName);
    auditRecordParametersList.add(auditRecordParameters);

    List<Credential> credentials = credentialDataService.findAllByName(credentialName);

    // We need this extra check in case permissions aren't being enforced.
    if (credentials.isEmpty() || !permissionService.hasPermission(userContext.getAclUser(), credentialName, READ)) {
      throw new EntryNotFoundException("error.credential.invalid_access");
    }

    return DataResponse.fromEntity(credentials);
  }
================================================================================
Method: getVersionByIdentifier
VULNERABLE VERSION:


  private Credential getVersionByIdentifier(
      UserContext userContext,
      List<EventAuditRecordParameters> auditRecordParametersList,
      String identifier,
      Function<String, Credential> getFn
  ) {
    EventAuditRecordParameters eventAuditRecordParameters = new EventAuditRecordParameters(
        AuditingOperationCode.CREDENTIAL_ACCESS
    );

    Credential credential = getFn.apply(identifier);

    if (credential != null) {
      eventAuditRecordParameters.setCredentialName(credential.getName());
    }

    auditRecordParametersList.add(eventAuditRecordParameters);

    if (credential == null || !permissionService.hasPermission(userContext.getAclUser(), credential.getName(), READ)) {
      throw new EntryNotFoundException("error.credential_not_found");
    }

    return credential;
  }
FIXED VERSION:


  private Credential getVersionByIdentifier(
      UserContext userContext,
      List<EventAuditRecordParameters> auditRecordParametersList,
      String identifier,
      Function<String, Credential> getFn
  ) {
    EventAuditRecordParameters eventAuditRecordParameters = new EventAuditRecordParameters(
        AuditingOperationCode.CREDENTIAL_ACCESS
    );

    Credential credential = getFn.apply(identifier);

    if (credential != null) {
      eventAuditRecordParameters.setCredentialName(credential.getName());
    }

    auditRecordParametersList.add(eventAuditRecordParameters);

    if (credential == null || !permissionService.hasPermission(userContext.getAclUser(), credential.getName(), READ)) {
      throw new EntryNotFoundException("error.credential.invalid_access");
    }

    return credential;
  }
================================================================================
