Method: setPermissions
VULNERABLE VERSION:


  public PermissionsView setPermissions(UserContext userContext, String name,
      List<PermissionEntry> permissionEntryList) {
    final CredentialName credentialName = credentialNameDataService.find(name);

    // We need to verify that the credential exists in case ACL enforcement is off
    if (credentialName == null || !permissionService.hasPermission(userContext.getAclUser(), name, WRITE_ACL)) {
      throw new EntryNotFoundException("error.acl.lacks_credential_write");
    }

    for (PermissionEntry permissionEntry : permissionEntryList) {
      if (!permissionService.validAclUpdateOperation(userContext, permissionEntry.getActor())) {
        throw new InvalidAclOperationException("error.acl.invalid_update_operation");
      }
    }

    permissionsDataService
        .saveAccessControlEntries(credentialName, permissionEntryList);

    return new PermissionsView(credentialName.getName(),
        permissionsDataService.getAccessControlList(credentialName));
  }
FIXED VERSION:


  public PermissionsView setPermissions(UserContext userContext, String name,
      List<PermissionEntry> permissionEntryList) {
    final CredentialName credentialName = credentialNameDataService.find(name);

    // We need to verify that the credential exists in case ACL enforcement is off
    if (credentialName == null || !permissionService.hasPermission(userContext.getAclUser(), name, WRITE_ACL)) {
      throw new EntryNotFoundException("error.credential.invalid_access");
    }

    for (PermissionEntry permissionEntry : permissionEntryList) {
      if (!permissionService.validAclUpdateOperation(userContext, permissionEntry.getActor())) {
        throw new InvalidAclOperationException("error.acl.invalid_update_operation");
      }
    }

    permissionsDataService
        .saveAccessControlEntries(credentialName, permissionEntryList);

    return new PermissionsView(credentialName.getName(),
        permissionsDataService.getAccessControlList(credentialName));
  }
================================================================================
Method: deletePermissionEntry
VULNERABLE VERSION:


  public void deletePermissionEntry(UserContext userContext, String credentialName, String actor) {
    if (!permissionService.hasPermission(userContext.getAclUser(), credentialName, WRITE_ACL)) {
      throw new EntryNotFoundException("error.acl.lacks_credential_write");
    }

    if (!permissionService.validAclUpdateOperation(userContext, actor)) {
      throw new InvalidAclOperationException("error.acl.invalid_update_operation");
    }

    boolean successfullyDeleted = permissionsDataService
        .deleteAccessControlEntry(credentialName, actor);

    if (!successfullyDeleted) {
      throw new EntryNotFoundException("error.acl.lacks_credential_write");
    }
  }
FIXED VERSION:


  public void deletePermissionEntry(UserContext userContext, String credentialName, String actor) {
    if (!permissionService.hasPermission(userContext.getAclUser(), credentialName, WRITE_ACL)) {
      throw new EntryNotFoundException("error.credential.invalid_access");
    }

    if (!permissionService.validAclUpdateOperation(userContext, actor)) {
      throw new InvalidAclOperationException("error.acl.invalid_update_operation");
    }

    boolean successfullyDeleted = permissionsDataService
        .deleteAccessControlEntry(credentialName, actor);

    if (!successfullyDeleted) {
      throw new EntryNotFoundException("error.credential.invalid_access");
    }
  }
================================================================================
