Method: performRegenerate
VULNERABLE VERSION:


  public CredentialView performRegenerate(
      UserContext userContext,
      List<EventAuditRecordParameters> parametersList,
      CredentialRegenerateRequest requestBody,
      PermissionEntry currentUserPermissionEntry) {
    Credential credential = credentialDataService.findMostRecent(requestBody.getName());
    if (credential == null) {
      parametersList.add(new EventAuditRecordParameters(CREDENTIAL_UPDATE, requestBody.getName()));
      throw new EntryNotFoundException("error.credential_not_found");
    }

    Regeneratable regeneratable = regeneratableTypes
        .getOrDefault(credential.getCredentialType(), NotRegeneratable::new)
        .get();

    if (credential instanceof PasswordCredential && ((PasswordCredential) credential).getGenerationParameters() == null) {
      parametersList.add(new EventAuditRecordParameters(CREDENTIAL_UPDATE, requestBody.getName()));
    }

    final BaseCredentialGenerateRequest generateRequest = regeneratable
        .createGenerateRequest(credential);

    final CredentialValue credentialValue = CredentialValueFactory
        .generateValue(generateRequest, generatorService);

    StringGenerationParameters generationParameters = null;
    if (generateRequest instanceof PasswordGenerateRequest) {
      generationParameters = ((PasswordGenerateRequest) generateRequest).getGenerationParameters();
    }

    return credentialService.save(
        userContext,
        parametersList,
        generateRequest.getName(),
        generateRequest.isOverwrite(),
        generateRequest.getType(),
        generationParameters,
        credentialValue,
        generateRequest.getAdditionalPermissions(),
        currentUserPermissionEntry);
  }
FIXED VERSION:


  public CredentialView performRegenerate(
      UserContext userContext,
      List<EventAuditRecordParameters> parametersList,
      CredentialRegenerateRequest requestBody,
      PermissionEntry currentUserPermissionEntry) {
    Credential credential = credentialDataService.findMostRecent(requestBody.getName());
    if (credential == null) {
      parametersList.add(new EventAuditRecordParameters(CREDENTIAL_UPDATE, requestBody.getName()));
      throw new EntryNotFoundException("error.credential.invalid_access");
    }

    Regeneratable regeneratable = regeneratableTypes
        .getOrDefault(credential.getCredentialType(), NotRegeneratable::new)
        .get();

    if (credential instanceof PasswordCredential && ((PasswordCredential) credential).getGenerationParameters() == null) {
      parametersList.add(new EventAuditRecordParameters(CREDENTIAL_UPDATE, requestBody.getName()));
    }

    final BaseCredentialGenerateRequest generateRequest = regeneratable
        .createGenerateRequest(credential);

    final CredentialValue credentialValue = CredentialValueFactory
        .generateValue(generateRequest, generatorService);

    StringGenerationParameters generationParameters = null;
    if (generateRequest instanceof PasswordGenerateRequest) {
      generationParameters = ((PasswordGenerateRequest) generateRequest).getGenerationParameters();
    }

    return credentialService.save(
        userContext,
        parametersList,
        generateRequest.getName(),
        generateRequest.isOverwrite(),
        generateRequest.getType(),
        generationParameters,
        credentialValue,
        generateRequest.getAdditionalPermissions(),
        currentUserPermissionEntry);
  }
================================================================================
