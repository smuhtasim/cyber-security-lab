Method: deleteCredential_whenTheUserLacksPermission_throwsAnException
VULNERABLE VERSION:

  public void deleteCredential_whenTheUserLacksPermission_throwsAnException() {
    when(permissionService.hasPermission(USER, CREDENTIAL_NAME, DELETE))
        .thenReturn(false);

    try {
      subject.deleteCredential(userContext, CREDENTIAL_NAME);
      fail("Should throw exception");
    } catch (EntryNotFoundException e) {
      assertThat(e.getMessage(), equalTo("error.acl.lacks_credential_write"));
    }
  }
FIXED VERSION:

  public void deleteCredential_whenTheUserLacksPermission_throwsAnException() {
    when(permissionService.hasPermission(USER, CREDENTIAL_NAME, DELETE))
        .thenReturn(false);

    try {
      subject.deleteCredential(userContext, CREDENTIAL_NAME);
      fail("Should throw exception");
    } catch (EntryNotFoundException e) {
      assertThat(e.getMessage(), equalTo("error.credential.invalid_access"));
    }
  }
================================================================================
Method: deleteCredential_whenTheCredentialIsNotDeleted_throwsAnException
VULNERABLE VERSION:

  public void deleteCredential_whenTheCredentialIsNotDeleted_throwsAnException() {
    when(permissionService.hasPermission(USER, CREDENTIAL_NAME, DELETE))
        .thenReturn(true);
    when(credentialDataService.delete(CREDENTIAL_NAME)).thenReturn(false);

    try {
      subject.deleteCredential(userContext, CREDENTIAL_NAME);
      fail("Should throw exception");
    } catch (EntryNotFoundException e) {
      assertThat(e.getMessage(), equalTo("error.acl.lacks_credential_write"));
    }
  }
FIXED VERSION:

  public void deleteCredential_whenTheCredentialIsNotDeleted_throwsAnException() {
    when(permissionService.hasPermission(USER, CREDENTIAL_NAME, DELETE))
        .thenReturn(true);
    when(credentialDataService.delete(CREDENTIAL_NAME)).thenReturn(false);

    try {
      subject.deleteCredential(userContext, CREDENTIAL_NAME);
      fail("Should throw exception");
    } catch (EntryNotFoundException e) {
      assertThat(e.getMessage(), equalTo("error.credential.invalid_access"));
    }
  }
================================================================================
Method: getAllCredentialVersions_whenTheUserLacksPermission_throwsException
VULNERABLE VERSION:

  public void getAllCredentialVersions_whenTheUserLacksPermission_throwsException() {
    List<Credential> credentials = newArrayList(version1, version2);
    when(credentialDataService.findAllByName(CREDENTIAL_NAME))
        .thenReturn(credentials);
    when(permissionService.hasPermission(USER, CREDENTIAL_NAME, READ))
        .thenReturn(false);

    try {
      subject.getAllCredentialVersions(userContext, newArrayList(),
          CREDENTIAL_NAME);
      fail("should throw exception");
    } catch (EntryNotFoundException e) {
      assertThat(e.getMessage(), equalTo("error.credential_not_found"));
    }
  }
FIXED VERSION:

  public void getAllCredentialVersions_whenTheUserLacksPermission_throwsException() {
    List<Credential> credentials = newArrayList(version1, version2);
    when(credentialDataService.findAllByName(CREDENTIAL_NAME))
        .thenReturn(credentials);
    when(permissionService.hasPermission(USER, CREDENTIAL_NAME, READ))
        .thenReturn(false);

    try {
      subject.getAllCredentialVersions(userContext, newArrayList(),
          CREDENTIAL_NAME);
      fail("should throw exception");
    } catch (EntryNotFoundException e) {
      assertThat(e.getMessage(), equalTo("error.credential.invalid_access"));
    }
  }
================================================================================
Method: getCredentialVersions_whenTheCredentialDoesNotExist_throwsException
VULNERABLE VERSION:

  public void getCredentialVersions_whenTheCredentialDoesNotExist_throwsException() {
    when(credentialDataService.findAllByName(CREDENTIAL_NAME))
        .thenReturn(emptyList());
    when(permissionService.hasPermission(USER, CREDENTIAL_NAME, READ))
        .thenReturn(true);

    try {
      subject.getAllCredentialVersions(userContext, newArrayList(),
          CREDENTIAL_NAME);
      fail("should throw exception");
    } catch (EntryNotFoundException e) {
      assertThat(e.getMessage(), equalTo("error.credential_not_found"));
    }
  }
FIXED VERSION:

  public void getCredentialVersions_whenTheCredentialDoesNotExist_throwsException() {
    when(credentialDataService.findAllByName(CREDENTIAL_NAME))
        .thenReturn(emptyList());
    when(permissionService.hasPermission(USER, CREDENTIAL_NAME, READ))
        .thenReturn(true);

    try {
      subject.getAllCredentialVersions(userContext, newArrayList(),
          CREDENTIAL_NAME);
      fail("should throw exception");
    } catch (EntryNotFoundException e) {
      assertThat(e.getMessage(), equalTo("error.credential.invalid_access"));
    }
  }
================================================================================
Method: getMostRecentCredentialVersion_whenTheCredentialDoesNotExist_throwsException
VULNERABLE VERSION:

  public void getMostRecentCredentialVersion_whenTheCredentialDoesNotExist_throwsException() {
    when(credentialDataService.findMostRecent(CREDENTIAL_NAME))
        .thenReturn(null);

    try {
      subject.getMostRecentCredentialVersion(userContext, newArrayList(),
          CREDENTIAL_NAME);
      fail("should throw exception");
    } catch (EntryNotFoundException e) {
      assertThat(e.getMessage(), equalTo("error.credential_not_found"));
    }
  }
FIXED VERSION:

  public void getMostRecentCredentialVersion_whenTheCredentialDoesNotExist_throwsException() {
    when(credentialDataService.findMostRecent(CREDENTIAL_NAME))
        .thenReturn(null);

    try {
      subject.getMostRecentCredentialVersion(userContext, newArrayList(),
          CREDENTIAL_NAME);
      fail("should throw exception");
    } catch (EntryNotFoundException e) {
      assertThat(e.getMessage(), equalTo("error.credential.invalid_access"));
    }
  }
================================================================================
Method: getMostRecentCredentialVersion_whenTheUserLacksPermission_throwsException
VULNERABLE VERSION:

  public void getMostRecentCredentialVersion_whenTheUserLacksPermission_throwsException() {
    when(credentialDataService.findMostRecent(CREDENTIAL_NAME))
        .thenReturn(version1);
    when(permissionService.hasPermission(USER, CREDENTIAL_NAME, READ))
        .thenReturn(false);

    try {
      subject.getMostRecentCredentialVersion(userContext, newArrayList(),
          CREDENTIAL_NAME);
      fail("should throw exception");
    } catch (EntryNotFoundException e) {
      assertThat(e.getMessage(), equalTo("error.credential_not_found"));
    }
  }
FIXED VERSION:

  public void getMostRecentCredentialVersion_whenTheUserLacksPermission_throwsException() {
    when(credentialDataService.findMostRecent(CREDENTIAL_NAME))
        .thenReturn(version1);
    when(permissionService.hasPermission(USER, CREDENTIAL_NAME, READ))
        .thenReturn(false);

    try {
      subject.getMostRecentCredentialVersion(userContext, newArrayList(),
          CREDENTIAL_NAME);
      fail("should throw exception");
    } catch (EntryNotFoundException e) {
      assertThat(e.getMessage(), equalTo("error.credential.invalid_access"));
    }
  }
================================================================================
Method: getCredentialVersion_whenTheVersionDoesNotExist_throwsException
VULNERABLE VERSION:

  public void getCredentialVersion_whenTheVersionDoesNotExist_throwsException() {
    when(credentialDataService.findByUuid(UUID_STRING))
        .thenReturn(null);

    try {
      subject.getCredentialVersion(userContext, newArrayList(), UUID_STRING);
      fail("should throw exception");
    } catch (EntryNotFoundException e) {
      assertThat(e.getMessage(), equalTo("error.credential_not_found"));
    }
  }
FIXED VERSION:

  public void getCredentialVersion_whenTheVersionDoesNotExist_throwsException() {
    when(credentialDataService.findByUuid(UUID_STRING))
        .thenReturn(null);

    try {
      subject.getCredentialVersion(userContext, newArrayList(), UUID_STRING);
      fail("should throw exception");
    } catch (EntryNotFoundException e) {
      assertThat(e.getMessage(), equalTo("error.credential.invalid_access"));
    }
  }
================================================================================
Method: getCredentialVersion_whenTheUserLacksPermission_throwsException
VULNERABLE VERSION:

  public void getCredentialVersion_whenTheUserLacksPermission_throwsException() {
    when(credentialDataService.findByUuid(UUID_STRING))
        .thenReturn(version1);
    when(permissionService.hasPermission(USER, CREDENTIAL_NAME, READ))
        .thenReturn(false);

    try {
      subject.getCredentialVersion(userContext, newArrayList(), UUID_STRING);
      fail("should throw exception");
    } catch (EntryNotFoundException e) {
      assertThat(e.getMessage(), equalTo("error.credential_not_found"));
    }
  }
FIXED VERSION:

  public void getCredentialVersion_whenTheUserLacksPermission_throwsException() {
    when(credentialDataService.findByUuid(UUID_STRING))
        .thenReturn(version1);
    when(permissionService.hasPermission(USER, CREDENTIAL_NAME, READ))
        .thenReturn(false);

    try {
      subject.getCredentialVersion(userContext, newArrayList(), UUID_STRING);
      fail("should throw exception");
    } catch (EntryNotFoundException e) {
      assertThat(e.getMessage(), equalTo("error.credential.invalid_access"));
    }
  }
================================================================================
