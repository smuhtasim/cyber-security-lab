Method: save_whenThereIsAnExistingCredentialWithACEs_shouldThrowAnExceptionIfItLacksPermission
VULNERABLE VERSION:

  public void save_whenThereIsAnExistingCredentialWithACEs_shouldThrowAnExceptionIfItLacksPermission() {
    when(credentialDataService.findMostRecent(CREDENTIAL_NAME)).thenReturn(existingCredential);
    when(permissionService.hasPermission(userContext.getAclUser(), CREDENTIAL_NAME, WRITE_ACL)).thenReturn(false);

    accessControlEntries
        .add(new PermissionEntry("some_actor", Arrays.asList(PermissionOperation.READ_ACL)));

    try {
      subject.save(
          userContext,
          parametersList,
          CREDENTIAL_NAME,
          false,
          "password",
          generationParameters,
          credentialValue,
          accessControlEntries,
          currentUserPermissions);
    } catch (PermissionException pe) {
      assertThat(pe.getMessage(), equalTo("error.acl.lacks_credential_write"));
    }
  }
FIXED VERSION:

  public void save_whenThereIsAnExistingCredentialWithACEs_shouldThrowAnExceptionIfItLacksPermission() {
    when(credentialDataService.findMostRecent(CREDENTIAL_NAME)).thenReturn(existingCredential);
    when(permissionService.hasPermission(userContext.getAclUser(), CREDENTIAL_NAME, WRITE_ACL)).thenReturn(false);

    accessControlEntries
        .add(new PermissionEntry("some_actor", Arrays.asList(PermissionOperation.READ_ACL)));

    try {
      subject.save(
          userContext,
          parametersList,
          CREDENTIAL_NAME,
          false,
          "password",
          generationParameters,
          credentialValue,
          accessControlEntries,
          currentUserPermissions);
    } catch (PermissionException pe) {
      assertThat(pe.getMessage(), equalTo("error.credential.invalid_access"));
    }
  }
================================================================================
